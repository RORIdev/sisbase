<?xml version="1.0"?>
<doc>
    <assembly>
        <name>sisbase</name>
    </assembly>
    <members>
        <member name="T:sisbase.Attributes.EmojiAttribute">
            <summary>
            Atribute that sets the emoji for the command group
            </summary>
        </member>
        <member name="F:sisbase.Attributes.EmojiAttribute.Emoji">
            <summary>
            The emoji that will be used by the command group
            </summary>
        </member>
        <member name="M:sisbase.Attributes.EmojiAttribute.#ctor(DSharpPlus.Entities.DiscordEmoji)">
            <summary>
            Constructs a new EmojiAttribute from a <see cref="T:DSharpPlus.Entities.DiscordEmoji"/>
            </summary>
            <param name="emoji">The emoji</param>
        </member>
        <member name="M:sisbase.Attributes.EmojiAttribute.#ctor(System.String)">
            <summary>
            Constructs a new EmojiAttribute from an unicode name <br></br>
            Eg. :computer: , :white_check_mark:
            </summary>
            <param name="unicode">The unicode string  (requires being surrounded by colons)</param>
        </member>
        <member name="M:sisbase.Attributes.EmojiAttribute.#ctor(System.UInt64)">
            <summary>
            Constructs a new EmojiAttribute from an known guild emoji id.
            </summary>
            <param name="id">The id</param>
        </member>
        <member name="T:sisbase.Attributes.ImoutoAttribute">
            <summary>
            Attrribute that checks if the user is a staff member (Has Modify Roles permission)
            </summary>
        </member>
        <member name="T:sisbase.Attributes.OniiSanAttribute">
            <summary>
            Attribute that checks if the command is run on the MASTER guild
            </summary>
        </member>
        <member name="T:sisbase.Attributes.PrefixAttribute">
            <summary>
            Attribute that checks if a command was executed with an specified prefix
            </summary>
        </member>
        <member name="P:sisbase.Attributes.PrefixAttribute.Prefix">
            <summary>
            The prefix
            </summary>
        </member>
        <member name="M:sisbase.Attributes.PrefixAttribute.#ctor(System.String)">
            <summary>
            Constructs a new PrefixAttribute from a given prefix
            </summary>
            <param name="prefix">The prefix</param>
        </member>
        <member name="T:sisbase.Attributes.RequireSystemAttribute">
            <summary>
            Attribute that checks if an specified system is registered on the <see cref="T:sisbase.Utils.SMC"/>.<br></br>
            If the system exists the command is executed.
            </summary>
        </member>
        <member name="F:sisbase.Attributes.RequireSystemAttribute.System">
            <summary>
            The System
            </summary>
        </member>
        <member name="M:sisbase.Attributes.RequireSystemAttribute.#ctor(System.Type)">
            <summary>
            Constructs a new RequireSystemAttribute from a given system type.
            </summary>
            <param name="t">The system type <br></br>
            Must inherits <see cref="T:sisbase.Utils.ISystem"/>
            </param>
        </member>
        <member name="T:sisbase.Commands.Developer">
            <summary>
            Bot-Owner Only Commands
            </summary>
        </member>
        <member name="T:sisbase.Commands.Help">
            <summary>
            Base's Help Command
            </summary>
        </member>
        <member name="T:sisbase.Json">
            <summary>
            The configuration whichs is saved to the config.json file
            </summary>
        </member>
        <member name="P:sisbase.Json.MasterId">
            <summary>
            The Id of the master server
            </summary>
        </member>
        <member name="P:sisbase.Json.PuppetId">
            <summary>
            The Ids of the puppet servers
            </summary>
        </member>
        <member name="P:sisbase.Json.Prefixes">
            <summary>
            The prefixes that are going to be usedby the bot.
            </summary>
        </member>
        <member name="T:sisbase.Configuration.Sisbase">
            <summary>
            The configuration class for the bot.
            </summary>
        </member>
        <member name="P:sisbase.Configuration.Sisbase.JsonPath">
            <summary>
            Path of the configuration
            </summary>
        </member>
        <member name="P:sisbase.Configuration.Sisbase.Config">
            <summary>
            The configuration
            </summary>
        </member>
        <member name="M:sisbase.Configuration.Sisbase.#ctor(System.String)">
            <summary>
            Creates a new configuration from a provided path
            </summary>
            <param name="path">The path. Must be a directory.</param>
        </member>
        <member name="M:sisbase.Configuration.Sisbase.Update">
            <summary>
            Updates the file of the config with the currently running config
            </summary>
        </member>
        <member name="T:sisbase.SisbaseBot">
            <summary>
            The class all sisbase bots derive from
            </summary>
        </member>
        <member name="P:sisbase.SisbaseBot.Instance">
            <summary>
            The currently running Instance
            </summary>
        </member>
        <member name="P:sisbase.SisbaseBot.SisbaseConfiguration">
            <summary>
            The configuration for the bot.
            </summary>
        </member>
        <member name="P:sisbase.SisbaseBot.Client">
            <summary>
            The DiscordClient
            </summary>
        </member>
        <member name="P:sisbase.SisbaseBot.CommandsNext">
            <summary>
            The CommandsNextExtension for the <see cref="P:sisbase.SisbaseBot.Client"/>
            </summary>
        </member>
        <member name="P:sisbase.SisbaseBot.Interactivity">
            <summary>
            The InteractivityExtension for the <see cref="P:sisbase.SisbaseBot.Client"/>
            </summary>
        </member>
        <member name="P:sisbase.SisbaseBot.Systems">
            <summary>
            The System Managment Controller<br></br>
            Responsible for registry and unregistry of all Systems.
            </summary>
        </member>
        <member name="M:sisbase.SisbaseBot.#ctor(sisbase.Configuration.Sisbase)">
            <summary>
            Constructs a new <see cref="T:sisbase.SisbaseBot"/> from a given configuration
            </summary>
            <param name="sisbaseConfiguration"> The configuration used by the bot.</param>
        </member>
        <member name="M:sisbase.SisbaseBot.RTPR(DSharpPlus.Entities.DiscordMessage)">
            <summary>
            Real-Time Prefix Resolver
            </summary>
        </member>
        <member name="M:sisbase.SisbaseBot.RegisterBot(System.Reflection.Assembly)">
            <summary>
            Registers all systems and commands from a given assembly. The System and Command classes need to be public for registration
            </summary>
            <param name="asm">The assembly</param>
        </member>
        <member name="M:sisbase.SisbaseBot.StartAsync">
            <summary>
            Starts the bot instance
            </summary>
            <returns></returns>
        </member>
        <member name="M:sisbase.SisbaseBot.DisconnectAsync">
            <summary>
            Disconnects the bot
            </summary>
            <returns></returns>
        </member>
        <member name="T:sisbase.Systems.MasterServer">
            <summary>
            The guild the bot is supossed to run
            </summary>
        </member>
        <member name="T:sisbase.Utils.Behaviours">
            <summary>
            Stores all of the currently available behaviours
            </summary>
        </member>
        <member name="T:sisbase.Utils.Behaviours.CountingBehaviour">
            <summary>
            The counting behaviour for ListEmbeds
            </summary>
        </member>
        <member name="F:sisbase.Utils.Behaviours.CountingBehaviour.Ordinal">
            <summary>
            Counts from 1.
            </summary>
        </member>
        <member name="F:sisbase.Utils.Behaviours.CountingBehaviour.Default">
            <summary>
            Counts from 0.
            </summary>
        </member>
        <member name="T:sisbase.Utils.EmbedBase">
            <summary>
            Utility for generating consistant embeds
            </summary>
        </member>
        <member name="M:sisbase.Utils.EmbedBase.GroupHelpEmbed(DSharpPlus.CommandsNext.Command)">
            <summary>
            Generates a new group help embed from an specified command <br></br>
            The comand must be a GroupCommand.
            </summary>
            <param name="Command"></param>
            <returns></returns>
        </member>
        <member name="M:sisbase.Utils.EmbedBase.HelpEmbed(DSharpPlus.CommandsNext.CommandsNextExtension,DSharpPlus.CommandsNext.CommandContext,System.Boolean)">
            <summary>
            Generates the bot help command embed.
            </summary>
            <param name="cne"></param>
            <param name="ctx"></param>
            <param name="showHidden"></param>
            <returns></returns>
        </member>
        <member name="M:sisbase.Utils.EmbedBase.InputEmbed(System.String)">
            <summary>
            Generates a new <see cref="T:DSharpPlus.Entities.DiscordEmbed"/> from a given query string. <br></br>
            Prepends "Please Type : " to the given string.
            /// </summary>
            <param name="input">The string</param>
            <returns></returns>
        </member>
        <member name="M:sisbase.Utils.EmbedBase.OutputEmbed(System.String)">
            <summary>
            Generates a new <see cref="T:DSharpPlus.Entities.DiscordEmbed"/> from a given string
            </summary>
            <param name="output">The string that will be set as the description</param>
            <returns></returns>
        </member>
        <member name="M:sisbase.Utils.EmbedBase.OrderedListEmbed``1(System.Collections.Generic.List{``0},System.String,sisbase.Utils.Behaviours.CountingBehaviour)">
            <summary>
            Generates a new <see cref="T:DSharpPlus.Entities.DiscordEmbed"/> with all the items on that list <br></br>
            with an index added to each entry.
            </summary>
            <typeparam name="T">The type of said list</typeparam>
            <param name="list">The list</param>
            <param name="name">Name that will be displayed on the embed.</param>
            <param name="behaviour">An <see cref="T:sisbase.Utils.Behaviours.CountingBehaviour"/>, defaults to <see cref="F:sisbase.Utils.Behaviours.CountingBehaviour.Default"/></param>
            <returns></returns>
        </member>
        <member name="M:sisbase.Utils.EmbedBase.ListEmbed``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Generates a new <see cref="T:DSharpPlus.Entities.DiscordEmbed"/> with all the items on that list
            </summary>
            <typeparam name="T">The type of said list</typeparam>
            <param name="list">The list</param>
            <param name="name">Name that will be displayed on the embed.</param>
            <returns></returns>
        </member>
        <member name="M:sisbase.Utils.EmbedBase.CommandHelpEmbed(DSharpPlus.CommandsNext.Command)">
            <summary>
            Generates a new command help embed from a specified command.
            </summary>
            <param name="command">The command</param>
            <returns></returns>
        </member>
        <member name="M:sisbase.Utils.EmbedBase.Mutate(DSharpPlus.Entities.DiscordEmbed,System.Action{DSharpPlus.Entities.DiscordEmbedBuilder})">
            <summary>
            Mutates a given <see cref="T:DSharpPlus.Entities.DiscordEmbed"/> with an given transformation
            </summary>
            <param name="embed">The embed that will be mutated</param>
            <param name="func">The transformation</param>
            <returns></returns>
        </member>
        <member name="T:sisbase.Utils.General">
            <summary>
            General utilities class
            </summary>
        </member>
        <member name="M:sisbase.Utils.General.AddCustomConfiguration``1(sisbase.Configuration.Sisbase,System.String,``0)">
            <summary>
            Adds a new custom configuration onto the bot config.
            </summary>
            <typeparam name="T"> Type of the custom configuration</typeparam>
            <param name="s"></param>
            <param name="key">The name of the custom configuration</param>
            <param name="value"></param>
        </member>
        <member name="M:sisbase.Utils.General.RemoveCustomConfiguration(sisbase.Configuration.Sisbase,System.String)">
            <summary>
            Removes an existing custom configuration from the bot config.
            </summary>
            <param name="s"></param>
            <param name="key">The name of the custom configuration</param>
        </member>
        <member name="M:sisbase.Utils.General.UpdateCustomConfiguration``1(sisbase.Configuration.Sisbase,System.String,``0)">
            <summary>
            Updates an existing custom configuration from the bot config.
            </summary>
            <typeparam name="T">Type of the custom configuration</typeparam>
            <param name="s"></param>
            <param name="key">The name of the custom configuration</param>
            <param name="newValue">The updated value</param>
        </member>
        <member name="M:sisbase.Utils.General.GetCustomConfiguration``1(sisbase.Configuration.Sisbase,System.String)">
            <summary>
            Gets the value of an existing custom configuration from the bot config.
            </summary>
            <typeparam name="T"> Type of the custom configuration</typeparam>
            <param name="s"></param>
            <param name="key">The name of the custom configuration</param>
        </member>
        <member name="T:sisbase.Utils.IClientSystem">
            <summary>
            Interface for <see cref="T:sisbase.Utils.ISystem"/> that can be applied to <see cref="T:DSharpPlus.DiscordClient"/>
            </summary>
        </member>
        <member name="M:sisbase.Utils.IClientSystem.ApplyToClient(DSharpPlus.DiscordClient)">
            <summary>
            Applies the current system to the current <see cref="T:DSharpPlus.DiscordClient"/>
            </summary>
            <param name="client">The currrent client</param>
        </member>
        <member name="T:sisbase.Utils.ISchedule">
            <summary>
            Interface for running a scheduled function on systems
            </summary>
        </member>
        <member name="P:sisbase.Utils.ISchedule.Timeout">
            <summary>
            Timeout for the schedule
            </summary>
        </member>
        <member name="M:sisbase.Utils.ISchedule.RunContinuous">
            <summary>
            What will be run after the timeout elapses
            </summary>
        </member>
        <member name="T:sisbase.Utils.IStaticSystem">
            <summary>
            Interface for systems that don't require connection to <see cref="N:DSharpPlus"/>
            </summary>
        </member>
        <member name="T:sisbase.Utils.ISystem">
            <summary>
            The base interface for all systems
            </summary>
        </member>
        <member name="P:sisbase.Utils.ISystem.Name">
            <summary>
            Name of the system
            </summary>
        </member>
        <member name="P:sisbase.Utils.ISystem.Description">
            <summary>
            Description of the system
            </summary>
        </member>
        <member name="P:sisbase.Utils.ISystem.Status">
            <summary>
            Status of the system
            </summary>
        </member>
        <member name="M:sisbase.Utils.ISystem.Activate">
            <summary>
            Pre-initiazation code.
            </summary>
        </member>
        <member name="M:sisbase.Utils.ISystem.Deactivate">
            <summary>
            Disables the system.
            </summary>
        </member>
        <member name="M:sisbase.Utils.ISystem.Execute">
            <summary>
            Will be executed before any attachment (if exists)
            </summary>
        </member>
        <member name="T:sisbase.Utils.Logger">
            <summary>
            The Logger
            </summary>
        </member>
        <member name="M:sisbase.Utils.Logger.Log(sisbase.Utils.ISystem,System.String)">
            <summary>
            Logs to the console from a system. Level : Log
            </summary>
            <param name="s">The system , usually used as an extension method</param>
            <param name="message">The message that would be logged</param>
        </member>
        <member name="M:sisbase.Utils.Logger.Warn(sisbase.Utils.ISystem,System.String)">
            <summary>
            Logs to the console from a system. Level : Warning
            </summary>
            <param name="s">The system , usually used as an extension method</param>
            <param name="message">The message that would be logged</param>
        </member>
        <member name="M:sisbase.Utils.Logger.Log(System.String,System.String)">
            <summary>
            Logs to the console from a system. Level : Log
            </summary>
            <param name="source">The source from where the log is called</param>
            <param name="message">The message that would be logged</param>
        </member>
        <member name="M:sisbase.Utils.Logger.Warn(System.String,System.String)">
            <summary>
            Logs to the console from a system. Level : Warn
            </summary>
            <param name="source">The source from where the log is called</param>
            <param name="message">The message that would be logged</param>
        </member>
        <member name="M:sisbase.Utils.Logger.Write(System.Boolean)">
            <summary>
            Simple utility to log booleans nicely
            </summary>
            <param name="b">The boolean</param>
        </member>
        <member name="T:sisbase.Utils.SMC">
            <summary>
            The System Management Controller
            Now with 100% less PPBUS_G3H
            </summary>
        </member>
        <member name="P:sisbase.Utils.SMC.RegisteredSystems">
            <summary>
            All of the current registerred systems on the SMC
            </summary>
        </member>
        <member name="P:sisbase.Utils.SMC.RegisteredTimers">
            <summary>
            All of the current registered timers on the SMC
            </summary>
        </member>
        <member name="T:sisbase.Utils.SMCExtensions">
            <summary>
            Provides extension methods for the <see cref="T:sisbase.Utils.SMC"/>
            </summary>
        </member>
    </members>
</doc>
